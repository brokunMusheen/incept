<!doctype html>
<html>
  <head>
    <meta content="IE=edge" http-equiv="X-UA-Compatible">
    <meta charset="utf-8">
    <meta content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no" name="viewport">

    <!-- Use title if it's in the page YAML frontmatter -->
    <title><%= current_page.data.title || "Middleman" %></title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/foundation/6.2.1/foundation.min.css" media="screen" charset="utf-8">
    <link href='//fonts.googleapis.com/css?family=Lato:300,400' rel='stylesheet' type='text/css'>

    <%= stylesheet_link_tag :site %>
    <%= javascript_include_tag :all %>
  </head>

  <body class="<%= page_classes %>">
    <%= yield %>
  </body>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js" charset="utf-8"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.24/vue.min.js" charset="utf-8"></script>
  <script src="https://cdn.jsdelivr.net/foundation/6.2.1/foundation.min.js"></script>
<script charset="utf-8">

$(document).foundation();

var site = new Vue({
    el: '.app',
    data: {
        name: null,
        client: null,
        hostName: null,
        defaultHost: 'aws',
        existingHost: null,
        features: <%= JSON.generate(data.features) %>,
        selections: [],
        baseHours: 8
    },
    computed: {
        showHosting: function() {
            return (this.name !== null) && (this.client !== null);
        },
        showExistingHosting: function() {
            return this.showHosting && this.existingHost;
        },
        showFeatures: function() {
            return this.showHosting && (this.existingHost !== null) && (this.hostName !== null);
        },
        showSocial: function() {
            return this.features.social;
        },
        showEstimateButton: function() {
            return this.showFeatures;
        },
        estimate: function() {
            var total = this.baseHours;
            var notes = [];

            var that = this;

            this.selections.forEach(function(el) {
                var feature_id = el.split('-');

                if(feature_id.length == 1) {
                    // el is a top-level feature
                    var feature = that.features[feature_id[0]];
                } else {
                    // el is a feature option
                    var feature = that.features[feature_id[0]]['options'][feature_id[1]];
                    if( ! that.featureSelected(feature_id[0])) {
                        return;
                    }
                }

                if(feature.hasOwnProperty('hours')) {
                    total += feature.hours;
                }

                if(feature.hasOwnProperty('notes')) {
                    notes.push(feature.notes);
                }
            });

            return {
                hours: total,
                notes: notes
            };
        }
    },
    methods: {
        pickHosting: function(type) {
            if(type == 'new') {
                this.existingHost = false;
                this.hostName = this.defaultHost;
            } else {
                if (this.existingHost !== true) {
                    this.hostName = null;
                }

                this.existingHost = true;
            }
        },
        featureSelected: function(feature_name) {
            return this.selections.indexOf(feature_name) !== -1;
        }
    }
});
</script>
</html>
